#include "../input.lp".
#include <incmode>.




direction((X,Y)) :- X=-1..1, Y=-1..1, |X+Y|=1.
nextto((X,Y),(X',Y'),(X+X',Y+Y')) :- position((X,Y)), direction((X',Y')), position((X+X',Y+Y')).

#program step(t).

 {    move(R,D,t) : direction(D) ;
    pickup(R,  t)                ;
   putdown(R,  t)                } 1 :- isRobot(R).

waits(R,t) :- not pickup(R,t), not putdown(R,t), not move(R,_,t), isRobot(R).

% - move/3 ----------------------------------------------------------------------
position(R,C,t) :- move(R,D,t),      position(R,C',t-1),     nextto(C',D,C).
                :- move(R,D,t),      position(R,C ,t-1), not nextto(C ,D,_).

% - pickup/2 --------------------------------------------------------------------
 carries(R,S,t) :- pickup(R,t),      position(R,C,t-1),   position(S,C ,t-1),  isShelf(S).
                :- pickup(R,t),       carries(R,_,t-1).
                :- pickup(R,t),      position(R,C,t-1), { position(S,C ,t-1) : isShelf(S) } = 0.              % UNSPECIFIC
                :- pickup(R,t),      position(R,C,t-1),   position(S,C',t-1), carries(R,S,t), C != C'.        % NEEDED?

% - putdown/2 -------------------------------------------------------------------
                :- putdown(R,t), not carries(R,_,t-1).                                                        % UNSPECIFIC

% - serves/4 --------------------------------------------------------------------
serves(R,S,P,t) :- position(R,C,t), carries(R,S,t),  position(P,C), isStation(P).

% - inertia ---------------------------------------------------------------------
position(R,C,t) :- position(R,C,t-1), not    move(R,_,t), isRobot(R).
 carries(R,S,t) :-  carries(R,S,t-1), not putdown(R,  t).

position(S,C,t) :- position(R,C,t  ),     carries(R,S,t).
position(S,C,t) :- position(S,C,t-1), not carries(_,S,t), isShelf(S).

% - (state) constraints ---------------------------------------------------------
 :- position(R, C, t-1), position(R, C',t), nextto(C,_,C'), R != R',
    position(R',C',t-1), position(R',C, t).

 :- { position(R,C,t) : isRobot(R)                                   }  > 1, position(C).
 :- { position(S,C,t) : isShelf(S)                                   }  > 1, position(C).
%*
 :- { position(R,C,t) : position(C)                                  } != 1, isRobot(R).
 :- { position(R,C,t) ; position(R,C',t) : nextto(C,_,C')            } != 1, position(R,C,t-1), isRobot(R).

 :- { carries(R,S,t)  : isShelf(S)                                   }  > 1, isRobot(R).
 :- { carries(R,S,t)  : isRobot(R)                                   }  > 1, isShelf(S).
*%
